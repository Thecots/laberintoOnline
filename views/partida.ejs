<script src="http://localhost:3000/socket.io/socket.io.js"></script>
<script>
  const socket = io('http://localhost:3000')
  const id = "<%= id %>"
  const name = prompt('Nombre de usuario: ')

  socket.emit('new-user', id, name)

</script>
<body>
  <a href="/">salir</a>
  <main>
    <header>
      <h1>Crear partida</h1>
      <div>
        <a style="  background-color: rgb(238, 144, 144) !important; color: black !important;" href="/">Volver</a>
      </div>
    </header>
   <section class="canvasBox">
      <canvas class="canvas"></canvas>
      <canvas class="hover">
        <img src="./img/crosshair.png" id="crosshair">
      </canvas>
   </section>
   <aside class="info">
     hola
   </aside>
  </main>
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>

    socket.on('user-connected', player => {
      console.log(player);
    })

    /* settings */
    const canvasSize = 600
    const pixelSize = canvasSize / 20
    const players = []
    const mouse = {
      click: false,
      x: 0,
      y: 0,
      color: 'black'
    }
    let boardMap = [];

  const canvas = document.querySelector('canvas.canvas')
  const ctx = canvas.getContext('2d')
  canvas.width = canvas.height = canvasSize

  class Pixel{
    constructor(x,y,color){
      this.x = x
      this.y = y
      this.color = color == null ? 'white' : color
    }
    draw(){
      ctx.beginPath();
      ctx.rect(this.x,this.y,pixelSize,pixelSize)
      ctx.fillStyle = this.color
      ctx.fill()
      ctx.closePath()
    }
  }

  function filBoard(){
    let board = []
    for (let y = 0; y < 20; y++) {
      for (let x = 0; x < 20; x++) {
        board.push(new Pixel(x*pixelSize,y*pixelSize))
      }
    }
    return board;
  }

  function printBoard(board){
    for (let i = 0; i < board.length; i++) {
      board[i].draw()
    }
  }
  


  function getQuery(q) {
   return (window.location.search.match(new RegExp('[?&]' + q + '=([^&]+)')) || [, null])[1];
  }


  function loop(){
    requestAnimationFrame(loop)
    ctx.clearRect(0,0, canvas.width, canvas.height)
    printBoard(boardMap)
    players.forEach(n => {
      n.draw()
    })
  }


  /* init */
  async function init(){
    fetch('/getmap',{
      method: 'POST',
      body: JSON.stringify({id} ),
      headers:{
          'Content-Type': 'application/json'
        }
    }).then(r => r.json())
    .then(r => {
      r.data.map.forEach(n => {
        boardMap.push(new Pixel(n.x,n.y,n.color))
      });
      res = boardMap.filter(n => n.color == 'royalblue')
      players.push(new Player(res[0].x,res[0].y,'red'))
      loop()
    })
  }

  class Player{
    constructor(x,y,color){
      this.x = x
      this.y = y
      this.color = color
    }

    draw(){
      ctx.beginPath()
      ctx.arc(this.x+25/2+3,this.y+25/2+3,10,Math.PI*2,false)
      ctx.fillStyle = this.color
      ctx.fill()
      ctx.closePath()
    }
  }


  document.addEventListener('keyup', e => {
    switch (e.keyCode) {
      case 39:
        /* derecha */
        let ld = boardMap.find(n => players[0].x+pixelSize == n.x && players[0].y == n.y)
        if(ld.color != undefined && ld.color == 'white'){
          players[0].x = ld.x
          players[0].y = ld.y
        }
        break;
      case 37:
        let li = boardMap.find(n => players[0].x-pixelSize == n.x && players[0].y == n.y)
        if(li.color != undefined && li.color == 'white'){
          players[0].x = li.x
          players[0].y = li.y
        }
        break
      case 40:
        let lu = boardMap.find(n => players[0].x == n.x && players[0].y+pixelSize == n.y)
        if(lu.color != undefined && lu.color == 'white'){
          players[0].x = lu.x
          players[0].y = lu.y
        }
        break
      case 38:
        let la = boardMap.find(n => players[0].x == n.x && players[0].y-pixelSize == n.y)
        if(la.color != undefined && la.color == 'white'){
          players[0].x = la.x
          players[0].y = la.y
        }
        break
      default:
        break;
    }  
  })
  
  init()
</script>